CASESTUDY ON WHY on why monolithic app or app1.py works and the modular app dont work:

started from this error when CURL testing:

chaitanyakharche@omen:~/Desktop/stock$ curl -X POST "http://127.0.0.1:8000/predict/?symbol=AAPL"
{"detail":"'>' not supported between instances of 'str' and 'int'"}

The Stock Gap Predictor API project illustrated classic challenges in distributed system architecture. What began as a simple 500 Internal Server Error spiraled into an instructive debugging odyssey across multiple service boundaries.

Initially, the API failed with `"Error processing stock data: Can only use .str accessor with Index, not MultiIndex"` - a telltale sign of API evolution in yfinance's column structure. The DataFrame now returned a MultiIndex even for single symbols. Our fix required intercepting this hierarchical structure and extracting level-1 column names:

```python
if isinstance(df.columns, pd.MultiIndex):
    df.columns = df.columns.get_level_values(1)
```

Yet the system then failed with `'Close'` errors, revealing capitalization inconsistency across module boundaries. While data.py standardized on uppercase ('Close'), other modules expected lowercase ('close'), creating a type impedance mismatch at the interface level.

The most insidious bug emerged next: `'>' not supported between instances of 'str' and 'int'`. Despite explicit type conversions, this comparison error persisted. The culprit wasn't in our primary code paths but in cache.py's timestamp comparison, demonstrating how peripheral systems can cascade failures into core functionality.

Our final hurdle: `"If using all scalar values, you must pass an index"` when handling API responses. The fix required defensive programming around DataFrame creation:

```python
if isinstance(news_json, dict):
    news_df = pd.DataFrame([news_json], index=[0])
```

This journey exemplified distributed systems debugging fundamentals: trace propagation across module boundaries, type consistency at interfaces, defensive programming, and modular error isolation. Each fix deepened our understanding of the system's interactions, culminating in resilient code that gracefully handles edge cases and API evolution.